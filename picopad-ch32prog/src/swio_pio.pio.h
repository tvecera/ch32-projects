/**
 * @file swio_pio.pio.h
 * @brief PIO state machine for SWIO protocol (autogenerated)
 *
 * Based on picorvd by Austin Appleby (aappleby)
 * Original: https://github.com/aappleby/picorvd/blob/master/src/singlewire.pio
 * Author: Austin Appleby
 */

// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// singlewire //
// ---------- //

#define singlewire_wrap_target 0
#define singlewire_wrap 22

static const uint16_t singlewire_program_instructions[] = {
            //     .wrap_target
    0x82a0, //  0: pull   block           side 0 [2]
    0x7158, //  1: out    y, 24           side 1 [1]
    0xa242, //  2: nop                    side 0 [2]
    0x7021, //  3: out    x, 1            side 1
    0x1026, //  4: jmp    !x, 6           side 1
    0xb542, //  5: nop                    side 1 [5]
    0x02e3, //  6: jmp    !osre, 3        side 0 [2]
    0x0030, //  7: jmp    !x, 16          side 0
    0x0009, //  8: jmp    9               side 0
    0xe03f, //  9: set    x, 31           side 0
    0xb142, // 10: nop                    side 1 [1]
    0xa242, // 11: nop                    side 0 [2]
    0x4201, // 12: in     pins, 1         side 0 [2]
    0x024a, // 13: jmp    x--, 10         side 0 [2]
    0xa642, // 14: nop                    side 0 [6]
    0x0a00, // 15: jmp    0               side 0 [10]
    0x81a0, // 16: pull   block           side 0 [1]
    0x7021, // 17: out    x, 1            side 1
    0x1034, // 18: jmp    !x, 20          side 1
    0xb542, // 19: nop                    side 1 [5]
    0x02f1, // 20: jmp    !osre, 17       side 0 [2]
    0xa642, // 21: nop                    side 0 [6]
    0x0a00, // 22: jmp    0               side 0 [10]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program singlewire_program = {
    .instructions = singlewire_program_instructions,
    .length = 23,
    .origin = -1,
};

static inline pio_sm_config singlewire_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + singlewire_wrap_target, offset + singlewire_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif
